name: Build

on:
  workflow_call:
    inputs:
      platforms:
        required: false
        type: string
        default: >-
          [ "ubuntu-latest", "windows-latest" ]
      configurations:
        required: false
        type: string
        default: >-
          [ "Debug", "Release" ]

      apt_dependencies:
        required: false
        type: string
      pip_dependencies:
        required: false
        type: string

      cmake_options:
        required: false
        type: string

      test_configurations:
        required: false
        type: string
        default: all
      test_platforms:
        required: false
        type: string
        default: all

      package_configurations:
        required: false
        type: string
      package_platforms:
        required: false
        type: string
      
      python_version:
        required: false
        type: string

jobs:
  test:
    strategy:
      matrix:
        platform: ${{ fromJSON(inputs.platforms) }}
        configuration: ${{ fromJson(inputs.configurations) }}

    runs-on: ${{ matrix.platform }}

    steps:
    - name: Install apt dependencies
      if: runner.os == 'Linux' && inputs.apt_dependencies
      run: sudo apt-get update && sudo apt-get --fix-missing --reinstall install -y ${{ inputs.apt_dependencies }}

    - name: Install Python
      if: inputs.python_version
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}
    
    - name: Install pip dependencies
      if: inputs.pip_dependencies
      run: pip install ${{ inputs.pip_dependencies }}

    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.0

    - name: Install latest g++ for C++20
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install gcc-10 g++-10
        echo "CC=gcc-10" >> $GITHUB_ENV
        echo "CXX=g++-10" >> $GITHUB_ENV

    - name: Clone repo
      uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ${{ inputs.cmake_options }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.configuration }}
      
    - name: Test
      if: ${{ inputs.test_platforms && inputs.test_configurations && (inputs.test_platforms == 'all' || contains(fromJson(inputs.test_platforms), matrix.platform)) && (inputs.test_configurations == 'all' || contains(fromJson(inputs.test_configurations), matrix.configuration)) }}
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ matrix.configuration }}

    - name: Package
      if: ${{ inputs.package_platforms && inputs.package_configurations && (inputs.package_platforms == 'all' || contains(fromJson(inputs.package_platforms), matrix.platform)) && (inputs.package_configurations == 'all' || contains(fromJson(inputs.package_configurations), matrix.configuration)) }}
      working-directory: ${{ github.workspace }}/build
      run: cpack
